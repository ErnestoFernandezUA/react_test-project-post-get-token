{"version":3,"sources":["utils/axiosClient.ts","store/features/Positions/positionsSlice.ts","api/position.ts","store/features/Token/isTokenActive.ts","store/features/Token/tokenSlice.ts","api/token.ts","api/users.get.ts","store/features/Users/usersSlice.ts","api/users.post.ts","store/features/Options/optionsSlice.ts","store/index.ts","store/hooks.ts","UI/Button/Button.tsx","images/logo.svg","components/Header/Header.tsx","pages/HomePage/HomePage.tsx","pages/NotFound.tsx","style/breakpoints.ts","App.tsx","helpers/getTypeScreen.ts","index.tsx"],"names":["baseURL","instance","axios","create","client","url","console","log","get","response","data","config","post","initialState","storage","statusLoading","error","getPositionsAsync","createAsyncThunk","_","a","rejectWithValue","positionsSlice","createSlice","name","reducers","addPositions","state","action","push","payload","setPositionsStatus","setPositionsError","resetPositionsState","extraReducers","builder","addCase","pending","fulfilled","success","positions","rejected","actions","isTokenActive","timeOfLastSet","activeDuration","currentTime","Date","now","isActive","Math","floor","currentRequestId","getTokenAsync","getState","requestId","token","tokenSlice","setToken","setStatus","setError","resetToken","meta","getUsersPage","link","page","count","link_to_next_page","current_page","total_pages","fails","email","phone","images","position_id","getUsersAsync","delay","Promise","resolve","setTimeout","postUserAsync","user","formData","FormData","append","body","headers","Token","String","postUser","usersSlice","addUsers","addPayload","length","resetState","users","next_url","links","screen","optionsSlice","setScreen","resetOptionsState","selectScreen","options","rootReducer","combineReducers","tokenReducer","persistConfig","key","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","Button","className","disabled","children","onClick","width","classNames","style","onKeyDown","Header","type","scroll","scrollToTop","src","Logo","alt","activeClass","to","spy","smooth","duration","HomePage","height","NotFound","breakpoint","App","dispatch","useEffect","window","innerWidth","getTypeScreen","position","top","left","zIndex","innerHeight","localStorage","clear","router","createHashRouter","path","element","errorElement","id","ReactDOM","createRoot","document","getElementById","render","loading"],"mappings":"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","file":"static/js/main.b6c7a9cd.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'https://frontend-test-assignment-api.abz.agency/api/v1';\n\nconst instance = axios.create({\n  baseURL,\n});\n\ntype FetchData = {\n};\n\nexport const client = {\n  async get<T>(url: string) {\n    // eslint-disable-next-line no-console\n    console.log('get', baseURL + url);\n\n    const response = await instance.get<T>(url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: FetchData, config: any) {\n    // eslint-disable-next-line no-console\n    console.log('post', baseURL + url, data);\n\n    const response = await instance.post<T>(url, data, config);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: FetchData) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../../index';\nimport { getPositions } from '../../../api/position';\nimport { PositionType } from '../../../type/Position';\n\nexport interface PositionsState {\n  storage: PositionType[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: unknown;\n}\n\nconst initialState: PositionsState = {\n  storage: [],\n  statusLoading: 'idle',\n  error: null,\n};\n\nexport const getPositionsAsync = createAsyncThunk(\n  'users/getPositions',\n  async (_, { rejectWithValue }) => {\n    let response;\n\n    try {\n      response = await getPositions();\n    } catch (error) {\n      rejectWithValue(error);\n    }\n\n    return response;\n  },\n);\n\nconst positionsSlice = createSlice({\n  name: 'positions',\n  initialState,\n  reducers: {\n    addPositions: (state: PositionsState, action: PayloadAction<PositionType[]>) => {\n      state.storage.push(...action.payload);\n    },\n    setPositionsStatus: (\n      state: PositionsState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setPositionsError: (\n      state: PositionsState,\n      action: PayloadAction<unknown>,\n    ) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetPositionsState: () => {\n      return initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPositionsAsync.pending,\n        (state: PositionsState) => {\n          state.statusLoading = 'loading';\n        })\n      .addCase(getPositionsAsync.fulfilled,\n        (state, action) => {\n          state.statusLoading = 'idle';\n\n          if (action.payload && action.payload.success) {\n            // always overwriting previous storage\n            state.storage = action.payload.positions;\n          }\n        })\n      .addCase(getPositionsAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n      });\n  },\n});\n\nexport default positionsSlice.reducer;\nexport const {\n  setPositionsStatus,\n  setPositionsError,\n  resetPositionsState,\n} = positionsSlice.actions;\n\nexport const selectPositions = (state: RootState) => state.positions.storage;\nexport const selectPositionsStatusLoading = (state: RootState) => state.positions.statusLoading;\nexport const selectPositionsError = (state: RootState) => state.positions.error;\n","import { PositionType } from '../type/Position';\nimport { client } from '../utils/axiosClient';\n\nexport interface PositionsResponse {\n  success: boolean;\n  positions: PositionType[];\n}\n\nexport const getPositions = () => client.get<PositionsResponse>('/positions');\n","export const isTokenActive = (\n  timeOfLastSet: number | null,\n  activeDuration: number, // min\n) => {\n  const currentTime = Date.now();\n\n  if (timeOfLastSet) {\n    const isActive = currentTime - timeOfLastSet < activeDuration * 60 * 1000;\n\n    // eslint-disable-next-line no-console\n    console.log(\n      'selectTokenIsExpired/ time from last:',\n      Math.floor((currentTime - timeOfLastSet) / 1000 / 60), 'min,',\n      'is token active? ', isActive,\n    );\n\n    return isActive;\n  }\n\n  return false;\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { getToken, TokenResponse } from '../../../api/token';\n// eslint-disable-next-line import/no-cycle\nimport {\n  RootState,\n} from '../..';\nimport { isTokenActive } from './isTokenActive';\n\nconst TOKEN_ACTIVE_DURATION = 40; // min\n\nexport interface TokenState {\n  storage: string | null;\n  currentRequestId: string | null;\n  timeOfLastSet: number | null;\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: unknown;\n}\n\nconst initialState: TokenState = {\n  storage: null,\n  currentRequestId: null,\n  timeOfLastSet: null,\n  statusLoading: 'idle',\n  error: null,\n};\n\nexport const getTokenAsync = createAsyncThunk(\n  'token/fetchToken',\n  async (_, {\n    rejectWithValue,\n    getState,\n    requestId,\n  }) => {\n    try {\n      const state = getState() as RootState;\n\n      const isActive = isTokenActive(state.token.timeOfLastSet, TOKEN_ACTIVE_DURATION);\n\n      if (requestId === state.token.currentRequestId && !isActive) {\n        const response: TokenResponse = await getToken();\n\n        return response;\n      }\n    } catch (error) {\n      rejectWithValue(error);\n    }\n  },\n);\n\nconst tokenSlice = createSlice({\n  name: 'token',\n  initialState,\n  reducers: {\n    setToken: (state: TokenState, action: PayloadAction<TokenResponse>) => {\n      state.storage = action.payload.token;\n    },\n    setStatus: (\n      state: TokenState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setError: (\n      state: TokenState,\n      action: PayloadAction<unknown>,\n    ) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetToken: () => {\n      return initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getTokenAsync.pending, (\n        state: TokenState,\n        { meta: { requestId } },\n      ) => {\n        state.statusLoading = 'loading';\n        state.error = null;\n\n        if (!state.currentRequestId) {\n          state.currentRequestId = requestId;\n        }\n      })\n      .addCase(getTokenAsync.fulfilled,\n        (state, action: PayloadAction<TokenResponse | undefined>) => {\n          if (action.payload) {\n            state.storage = action.payload.token;\n            state.timeOfLastSet = Date.now();\n          }\n\n          state.statusLoading = 'idle';\n          state.currentRequestId = null;\n        })\n      .addCase(getTokenAsync.rejected, (state, action) => {\n        state.statusLoading = 'failed';\n        state.error = action.payload;\n      });\n  },\n});\n\nexport default tokenSlice.reducer;\nexport const {\n  setToken,\n  setStatus,\n  setError,\n  resetToken,\n} = tokenSlice.actions;\n\nexport const selectToken = (state: RootState) => state.token.storage;\nexport const selectTokenStatusLoading = (state: RootState) => state.token.statusLoading;\nexport const selectTokenError = (state: RootState) => state.token.error;\nexport const selectIsTokenExpired\n= (state: RootState) => isTokenActive(state.token.timeOfLastSet, TOKEN_ACTIVE_DURATION);\n","import { client } from '../utils/axiosClient';\n\nexport type TokenResponse = {\n  success: boolean,\n  token: string,\n};\n\nexport const getToken = () => client.get<TokenResponse>('/token');\n","import { UserType } from '../type/User';\nimport { client } from '../utils/axiosClient';\n\nexport type GetUsersParams = {\n  link_to_next_page?: string | null;\n  page?: number;\n  count?: number;\n  delay?: number;\n};\n\nexport type GetUsersResponse = {\n  count: number | null;\n  links: {\n    next_url: string | null;\n    prev_url: string | null;\n  },\n  page: number | null;\n  success: boolean;\n  total_pages: number | null;\n  total_users: number | null;\n  users: UserType[];\n};\n\nexport const getAllUsers = () => client.get('/users');\nexport const getUserById = (userId: number) => client.get(`/users/${userId}`);\nexport const getUsersPage = (\n  link: string | null,\n  page: number,\n  count: number,\n) => client.get<GetUsersResponse>(link || `/users?page=${page}&count=${count}`);\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport {\n  RootState,\n} from '../../index';\nimport { UserType } from '../../../type/User';\nimport { getUsersPage, GetUsersParams, GetUsersResponse } from '../../../api/users.get';\n// import { getTokenAsync } from '../Token/tokenSlice';\nimport {\n  postUser,\n  // PostUserResponse,\n} from '../../../api/users.post';\n// import axios from 'axios';\n\nconst DELAY_OF_WAITING = 5000;\n\nexport interface UsersState {\n  storage: UserType[];\n  payload: UserType[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: string | null;\n\n  link_to_next_page: string | null;\n  current_page: number | null;\n  total_pages: number | null;\n  positions: string[];\n\n  fails: {\n    name: string[] | null;\n    email: string[] | null;\n    phone: string[] | null;\n    images: string[] | null;\n    position_id: string[] | null;\n  }\n}\n\nconst initialState: UsersState = {\n  storage: [],\n  payload: [],\n  statusLoading: 'idle',\n  error: null,\n\n  link_to_next_page: null,\n  current_page: null,\n  total_pages: null,\n  positions: [],\n\n  fails: {\n    name: null,\n    email: null,\n    phone: null,\n    images: null,\n    position_id: null,\n  },\n};\n\nexport const getUsersAsync = createAsyncThunk(\n  'users/fetchUsers',\n  async ({\n    link_to_next_page = null,\n    page = 1,\n    count = 6,\n    delay = DELAY_OF_WAITING,\n  }:GetUsersParams,\n  { rejectWithValue }) => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, delay));\n      const response = await getUsersPage(link_to_next_page, page, count);\n\n      return response;\n    } catch (error) {\n      rejectWithValue(error);\n    }\n  },\n);\n\n// reqex validation\n\nexport const postUserAsync = createAsyncThunk(\n  'users/postUser',\n  async ({\n    user: {\n      name,\n      email,\n      phone,\n      images,\n      position_id,\n    },\n    delay = 1000,\n  }: any,\n  {\n    // dispatch,\n    getState,\n    rejectWithValue,\n  }) => {\n    // eslint-disable-next-line no-console\n    console.log('postUserAsync', position_id);\n\n    try {\n      const state = getState() as RootState;\n\n      // eslint-disable-next-line no-console\n      console.log('state.token.storage', state.token.storage);\n      await new Promise(resolve => setTimeout(resolve, delay));\n      // await dispatch(getTokenAsync());\n\n      const formData = new FormData();\n\n      formData.append('position_id', position_id);\n      formData.append('name', name);\n      formData.append('email', email);\n      formData.append('phone', phone);\n      formData.append('photo', images[0]);\n\n      // 1 - not work\n      // eslint-disable-next-line no-console\n      console.log(formData);\n\n      const response = await postUser(\n        {\n          body: formData,\n          headers: {\n            Token: String(state.token.storage),\n          },\n        },\n      );\n\n      // 2 - not work\n      // const response = await axios({\n      //   url: 'https://frontend-test-assignment-api.abz.agency/api/v1/users',\n      //   method: 'POST',\n      //   headers: {\n      //     'Token': String(state.token.storage),\n      //     'Accept': 'application/json',\n      //     'Content-Type': 'application/json',\n      //     // 'Authorization': 'Bearer ' + credentials.t\n      //   },\n      //   data: formData,\n      // })\n\n      // 3 - work but fetch\n      // const response = await fetch('https://frontend-test-assignment-api.abz.agency/api/v1/users',\n      //   {\n      //     method: 'POST',\n      //     body: formData,\n      //     headers: {\n      //       'Token': String(state.token.storage),\n      //     },\n      //   }\n      // ).then((res) => res.json());\n\n      // eslint-disable-next-line no-console\n      console.log('postUserAsync/ response', response);\n\n      return response;\n    } catch (error) {\n      rejectWithValue(error);\n    }\n  },\n);\n\nconst usersSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    addUsers: (state: UsersState, action: PayloadAction<UserType[]>) => {\n      state.storage.push(...action.payload);\n    },\n    addPayload: (state: UsersState) => {\n      state.storage.push(...state.payload);\n      state.payload.length = 0;\n    },\n    setStatus: (\n      state: UsersState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    resetState: () => {\n      return initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getUsersAsync.pending, (\n        state: UsersState,\n      ) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(getUsersAsync.fulfilled,\n        (\n          state: UsersState,\n          action:PayloadAction<GetUsersResponse | undefined,\n          string, {arg: GetUsersParams; requestId: string; requestStatus: 'fulfilled';}, never>,\n        ) => {\n          if (action.payload && action.payload.success) {\n            const {\n              users,\n              links: { next_url },\n              total_pages,\n              page,\n            } = action.payload;\n\n            state.payload.push(...users);\n            state.statusLoading = 'idle';\n            state.link_to_next_page = next_url;\n            state.total_pages = total_pages;\n            state.current_page = page;\n          } else {\n            state.error = 'getUsersAsync.fulfilled/ response.success = false';\n          }\n        })\n      .addCase(getUsersAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n      })\n      .addCase(postUserAsync.pending, (\n        state: UsersState,\n      ) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(postUserAsync.fulfilled, (\n        state,\n        action,\n        //     :PayloadAction<PostUserResponse, string, {\n        //     arg: any;\n        //     requestId: string;\n        //     requestStatus: \"fulfilled\";\n        // }, never>\n      ) => {\n        state.statusLoading = 'idle';\n\n        // eslint-disable-next-line no-console\n        console.log('postUserAsync.fulfilled/ action.payload', action.payload);\n        // state.storage.push(action.payload);\n        if (!action.payload) {\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n\n        // if (action.payload.success) {\n        //   console.log(action.payload.message);\n        // } else {\n        //   state.fails = { ...state.fails, ...action.payload.fails};\n        // }\n      })\n      .addCase(postUserAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n        // console.log('postUserAsync.rejected');\n      });\n  },\n});\n\nexport default usersSlice.reducer;\nexport const {\n  addUsers,\n  addPayload,\n  setStatus,\n  resetState,\n} = usersSlice.actions;\n\nexport const selectUsers = (state: RootState) => state.users.storage;\nexport const selectPayloadUsers = (state: RootState) => state.users.payload;\nexport const selectUsersStatusLoading = (state: RootState) => state.users.statusLoading;\nexport const selectUsersError = (state: RootState) => state.users.error;\nexport const selectLinkToNext = (state: RootState) => state.users.link_to_next_page;\nexport const selectIsLastPage\n= (state: RootState) => state.users.current_page === state.users.total_pages;\nexport const selectPostFails = (state: RootState) => state.users.fails;\n","import { client } from '../utils/axiosClient';\n\nexport type PostUserResponse = {\n  success: boolean;\n  user_id: number;\n  message: string;\n  fails?: {\n    name: string[],\n    email: string[],\n    phone: string[],\n    position_id: string[],\n    photo: string[],\n  },\n};\n\nexport const postUser = (data: any, config: any) => client.post('/users', data, config);\n","/* eslint-disable no-param-reassign */\nimport {\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../../index';\nimport { ScreenType } from '../../../type/Screen';\n\nexport interface OptionsState {\n  screen: ScreenType | null;\n}\n\nconst initialState: OptionsState = {\n  screen: null,\n};\n\nconst optionsSlice = createSlice({\n  name: 'options',\n  initialState,\n  reducers: {\n    setScreen: (state: OptionsState, action: PayloadAction<ScreenType>) => {\n      state.screen = action.payload;\n    },\n    resetOptionsState: () => {\n      return initialState;\n    },\n  },\n});\n\nexport default optionsSlice.reducer;\nexport const {\n  setScreen,\n  resetOptionsState,\n} = optionsSlice.actions;\n\nexport const selectScreen = (state: RootState) => state.options.screen;\n","/* eslint-disable import/no-cycle */\nimport {\n  configureStore,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport positionsSlice from './features/Positions/positionsSlice';\nimport tokenReducer from './features/Token/tokenSlice';\nimport usersSlice from './features/Users/usersSlice';\nimport optionsSlice from './features/Options/optionsSlice';\n\nconst rootReducer = combineReducers({\n  users: usersSlice,\n  token: tokenReducer,\n  positions: positionsSlice,\n  options: optionsSlice,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['token'],\n  // blacklist: ['posts'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER, 'posts'],\n    },\n  }),\n});\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '.';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { FunctionComponent, ReactNode } from 'react';\nimport classNames from 'classnames';\nimport './Button.scss';\n\ntype AnyFunction = (...args: unknown[]) => unknown;\n\ninterface ButtonProps {\n  className?: string; // External className for position\n  disabled?: boolean;\n  children?: ReactNode;\n  onClick?: AnyFunction;\n  width?: number;\n}\n\nexport const Button: FunctionComponent<ButtonProps> = ({\n  className,\n  disabled = false,\n  children = '',\n  // eslint-disable-next-line no-console\n  onClick = () => console.log('no onClick function'),\n  width,\n}) => {\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className={classNames('Button',\n        { 'Button--disabled': disabled },\n        className)}\n      onClick={onClick}\n      style={{ width }}\n      onKeyDown={() => {}}\n    >\n      <div className=\"Button__container\">\n        {children}\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.85fd1d96.svg\";","import React, { FunctionComponent } from 'react';\nimport {\n  Link,\n  // DirectLink,\n  // Element,\n  // Events,\n  animateScroll as scroll,\n  // scrollSpy,\n  // scroller,\n} from 'react-scroll';\n\n// import { Container } from '../Container';\n// import { Wrapper } from '../Wrapper/Wrapper';\nimport { Button } from '../../UI/Button/Button';\nimport Logo from '../../images/logo.svg';\n\nimport './Header.scss';\n\nexport const Header: FunctionComponent = () => {\n  const scrollToTop = () => {\n    scroll.scrollToTop();\n  };\n\n  return (\n    <div className=\"Header\">\n\n      {/* <Wrapper> */}\n      <div className=\"Header__container\">\n        <div\n          className=\"Header__logo\"\n        >\n          <button type=\"button\" onClick={scrollToTop}>\n            <img src={Logo} alt=\"Logo\" />\n          </button>\n        </div>\n\n        <div className=\"Header__nav\">\n          <Link activeClass=\"active\" to=\"Get-Component\" spy smooth duration={500}>\n            <Button\n              className=\"Header__button\"\n              disabled={false}\n            >\n              Users\n            </Button>\n          </Link>\n\n          <Button className=\"Header__button\">Sign in</Button>\n        </div>\n      </div>\n      {/* </Wrapper> */}\n\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\n// import { ArticlePromo } from '../../components/ArticlePromo/ArticlePromo';\n// import { ArticleGet } from '../../components/ArticleGet';\n// import { ArticlePost } from '../../components/ArticlePost';\n\nimport './HomePage.scss';\n\nexport const HomePage: FunctionComponent = () => {\n  return (\n    <section className=\"HomePage\">\n      <div style={{ height: '200vh' }}></div>\n      {/* <ArticlePromo /> */}\n      {/* <ArticleGet />\n      <ArticlePost /> */}\n    </section>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nexport const NotFound: FunctionComponent = () => {\n  return (\n    <div>\n      This page doesn&apos;t exist.\n    </div>\n  );\n};\n","import { ScreenType } from '../type/Screen';\n\ntype BreakpointType = {\n  [screen in ScreenType]: number;\n};\n\nexport const breakpoint: BreakpointType = {\n  mobile: 370, // with scroll\n  tablet: 768,\n  desktop: 1024,\n  fullscreen: 1170,\n};\n","import React, { useEffect } from 'react';\nimport {\n  createHashRouter,\n  Outlet,\n} from 'react-router-dom';\n\nimport { useAppDispatch, useAppSelector } from './store/hooks';\nimport { getTokenAsync } from './store/features/Token/tokenSlice';\nimport { getUsersAsync } from './store/features/Users/usersSlice';\nimport { getPositionsAsync } from './store/features/Positions/positionsSlice';\nimport { Header } from './components/Header';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { NotFound } from './pages/NotFound';\nimport { selectScreen, setScreen } from './store/features/Options/optionsSlice';\nimport { getTypeScreen } from './helpers/getTypeScreen';\n\nlocalStorage.clear();\n\nfunction App() {\n  const dispatch = useAppDispatch();\n  const screen = useAppSelector(selectScreen);\n\n  useEffect(() => {\n    dispatch(setScreen(getTypeScreen()));\n    dispatch(getTokenAsync());\n    dispatch(getPositionsAsync());\n  }, []);\n\n  useEffect(() => {\n    if (screen\n      && screen !== 'mobile'\n      && screen !== 'tablet') {\n      dispatch(getUsersAsync({ page: 1, count: 6 }));\n    }\n  }, [dispatch, screen]);\n\n  return (\n    <>\n      <Header />\n\n      <div style={{\n        position: 'fixed',\n        top: '70px',\n        left: '20px',\n        zIndex: 9999,\n      }}\n      >\n        {window.innerWidth}\n        x\n        {window.innerHeight}\n      </div>\n\n      <main>\n        <Outlet />\n      </main>\n    </>\n  );\n}\n\nexport const router = createHashRouter([\n  {\n    path: '/',\n    element: <App />,\n    errorElement: <NotFound />,\n    id: 'App',\n    children: [\n      {\n        path: '/',\n        element: <HomePage />,\n        id: 'homepage',\n        errorElement: <>Error on Homepage</>,\n      },\n    ],\n  },\n]);\n","import { breakpoint } from '../style/breakpoints';\n\nexport const getTypeScreen = () => {\n  const width = window.innerWidth;\n\n  switch (true) {\n    case (width > breakpoint.fullscreen):\n      return 'fullscreen';\n\n    case (width > breakpoint.desktop):\n      return 'desktop';\n\n    case (width > breakpoint.tablet):\n      return 'tablet';\n\n    default:\n      return 'mobile';\n  }\n};\n","import React, { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom/client';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { RouterProvider } from 'react-router-dom';\n\nimport store, { persistor } from './store';\nimport { router } from './App';\n\nimport './style/index.css';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\n\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <RouterProvider router={router} />\n    </PersistGate>\n  </Provider>,\n);\n"],"sourceRoot":""}