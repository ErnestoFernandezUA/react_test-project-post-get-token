{"version":3,"sources":["utils/axiosClient.ts","store/features/Positions/positionsSlice.ts","api/position.ts","store/features/Token/isTokenActive.ts","store/features/Token/tokenSlice.ts","api/token.ts","api/users.get.ts","store/features/Users/usersSlice.ts","api/users.post.ts","store/index.ts","store/hooks.ts","components/Container/Container.tsx","components/Wrapper/Wrapper.tsx","UI/Button/Button.tsx","images/logo.svg","components/Header/Header.tsx","components/ArticlePromo/ArticlePromo.tsx","components/ArticleGet/ArticleGet.tsx","pages/HomePage/HomePage.tsx","pages/NotFound.tsx","App.tsx","index.tsx"],"names":["baseURL","instance","axios","create","client","url","get","response","console","log","data","post","initialState","storage","statusLoading","error","getPositionsAsync","createAsyncThunk","_","a","rejectWithValue","positionsSlice","createSlice","name","reducers","addPositions","state","action","push","payload","setPositionsStatus","setPositionsError","resetPositionsState","extraReducers","builder","addCase","pending","fulfilled","success","positions","rejected","actions","isTokenActive","timeOfLastSet","activeDuration","currentTime","Date","now","Math","floor","currentRequestId","setAt","getTokenAsync","getState","requestId","isActive","token","tokenSlice","setToken","setStatus","setError","resetToken","meta","getUsersPage","link","page","count","link_to_next_page","current_page","total_pages","fails","email","phone","images","position_id","getUsersAsync","delay","Promise","resolve","setTimeout","postUserAsync","user","formData","FormData","append","body","headers","Token","String","usersSlice","addUsers","addPayload","length","resetState","users","next_url","links","selectUsers","selectPayloadUsers","selectUsersStatusLoading","selectUsersError","selectLinkToNext","selectIsLastPage","rootReducer","combineReducers","tokenReducer","persistConfig","key","whitelist","persistedReducer","persistReducer","store","configureStore","reducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistor","persistStore","useAppDispatch","useDispatch","useAppSelector","useSelector","Container","children","className","Wrapper","Button","disabled","onClick","width","classNames","style","onKeyDown","Header","src","Logo","alt","ArticlePromo","ArticleGet","divRef","useRef","dispatch","payloadUsers","isLoading","isLastPage","useEffect","current","scrollIntoView","behavior","HomePage","NotFound","App","position","top","left","zIndex","window","innerWidth","innerHeight","router","createHashRouter","path","element","errorElement","id","ReactDOM","createRoot","document","getElementById","render","loading"],"mappings":"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","file":"static/js/main.6e4cb0cb.chunk.js","sourcesContent":["import axios from 'axios';\n\nconst baseURL = 'https://frontend-test-assignment-api.abz.agency/api/v1';\n\nconst instance = axios.create({\n  baseURL,\n});\n\ntype FetchData = {\n};\n\nexport const client = {\n  async get<T>(url: string) {\n    const response = await instance.get<T>(url);\n\n    // eslint-disable-next-line no-console\n    console.log('get', baseURL + url);\n\n    return response.data;\n  },\n\n  async post<T>(url: string, data: FetchData) {\n    const response = await instance.post<T>(url, data);\n\n    // eslint-disable-next-line no-console\n    console.log('post', baseURL + url, data);\n\n    return response.data;\n  },\n\n  async patch<T>(url: string, data: FetchData) {\n    const response = await instance.patch<T>(url, data);\n\n    return response.data;\n  },\n\n  async delete(url: string) {\n    return instance.delete(url);\n  },\n};\n","/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport { RootState } from '../../index';\nimport { getPositions } from '../../../api/position';\nimport { Position } from '../../../type/Position';\n\nexport interface PositionsState {\n  storage: Position[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: unknown;\n}\n\nconst initialState: PositionsState = {\n  storage: [],\n  statusLoading: 'idle',\n  error: null,\n};\n\nexport const getPositionsAsync = createAsyncThunk(\n  'users/getPositions',\n  async (_, { rejectWithValue }) => {\n    let response;\n\n    try {\n      response = await getPositions();\n    } catch (error) {\n      rejectWithValue(error);\n    }\n\n    return response;\n  },\n);\n\nconst positionsSlice = createSlice({\n  name: 'positions',\n  initialState,\n  reducers: {\n    addPositions: (state: PositionsState, action: PayloadAction<Position[]>) => {\n      state.storage.push(...action.payload);\n    },\n    setPositionsStatus: (\n      state: PositionsState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setPositionsError: (\n      state: PositionsState,\n      action: PayloadAction<unknown>,\n    ) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetPositionsState: () => {\n      return initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getPositionsAsync.pending,\n        (state: PositionsState) => {\n          state.statusLoading = 'loading';\n        })\n      .addCase(getPositionsAsync.fulfilled,\n        (state, action) => {\n          state.statusLoading = 'idle';\n\n          if (action.payload && action.payload.success) {\n            // always overwriting previous storage\n            state.storage = action.payload.positions;\n          }\n        })\n      .addCase(getPositionsAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n      });\n  },\n});\n\nexport default positionsSlice.reducer;\nexport const {\n  setPositionsStatus,\n  setPositionsError,\n  resetPositionsState,\n} = positionsSlice.actions;\n\nexport const selectPositions = (state: RootState) => state.positions.storage;\nexport const selectPositionsStatusLoading = (state: RootState) => state.positions.statusLoading;\nexport const selectPositionsError = (state: RootState) => state.positions.error;\n","import { Position } from '../type/Position';\nimport { client } from '../utils/axiosClient';\n\nexport interface PositionsResponse {\n  success: boolean;\n  positions: Position[];\n}\n\nexport const getPositions = () => client.get<PositionsResponse>('/positions');\n","export const isTokenActive = (timeOfLastSet: number | null, activeDuration: number) => {\n  const currentTime = Date.now();\n\n  if (timeOfLastSet) {\n    // console.log('selectTokenIsExpired/ last change:', timeOfLastSet);\n    // eslint-disable-next-line no-console\n    console.log('selectTokenIsExpired/ time from last:',\n      Math.floor((currentTime - timeOfLastSet) / 1000 / 60), 'min,',\n      'is token active? ', currentTime - timeOfLastSet < activeDuration * 60 * 1000);\n\n    return currentTime - timeOfLastSet < activeDuration * 60 * 1000;\n  }\n\n  return false;\n};\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\nimport { getToken, TokenResponse } from '../../../api/token';\n// eslint-disable-next-line import/no-cycle\nimport {\n  RootState,\n} from '../..';\nimport { isTokenActive } from './isTokenActive';\n\nconst TOKEN_ACTIVE_DURATION = 40; // min\n\nexport interface TokenState {\n  storage: string | null;\n  currentRequestId: string | null;\n  setAt: number | null;\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: unknown;\n}\n\nconst initialState: TokenState = {\n  storage: null,\n  currentRequestId: null,\n  setAt: null,\n  statusLoading: 'idle',\n  error: null,\n};\n\nexport const getTokenAsync = createAsyncThunk(\n  'token/fetchToken',\n  async (_, {\n    // rejectWithValue,\n    getState,\n    requestId,\n    // dispatch,\n  }) => {\n    // console.log('getTokenAsync/');\n    const state = getState() as RootState;\n\n    // console.log('getTokenAsync/ requestId = ', state.token.requestId, requestId);\n\n    const isActive = isTokenActive(state.token.setAt, TOKEN_ACTIVE_DURATION);\n    // console.log('getTokenAsync/ isTokenActive: ', isActive);\n\n    if (requestId === state.token.currentRequestId && !isActive) {\n      const response: TokenResponse = await getToken();\n\n      // console.log('getTokenAsync/ response', response);\n\n      return response;\n    }\n    // nothing to do\n    // console.log('getTokenAsync/ token is active and it shouldnt reload');\n\n    // return null;\n  },\n);\n\nconst tokenSlice = createSlice({\n  name: 'token',\n  initialState,\n  reducers: {\n    setToken: (state: TokenState, action: PayloadAction<TokenResponse>) => {\n      state.storage = action.payload.token;\n    },\n    setStatus: (\n      state: TokenState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    setError: (\n      state: TokenState,\n      action: PayloadAction<unknown>,\n    ) => {\n      state.error = action.payload;\n      state.statusLoading = 'failed';\n    },\n    resetToken: () => {\n      return initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getTokenAsync.pending, (\n        state: TokenState,\n        { meta: { requestId } },\n      ) => {\n        // console.log('getTokenAsync.pending/', requestId);\n        state.statusLoading = 'loading';\n\n        if (!state.currentRequestId) {\n          state.currentRequestId = requestId;\n        }\n      })\n      .addCase(getTokenAsync.fulfilled,\n        (state, action: PayloadAction<TokenResponse | undefined>) => {\n          if (action.payload) {\n            state.storage = action.payload.token;\n            state.setAt = Date.now();\n          }\n\n          state.statusLoading = 'idle';\n          state.currentRequestId = null;\n        })\n      .addCase(getTokenAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n      });\n  },\n});\n\nexport default tokenSlice.reducer;\nexport const {\n  setToken,\n  setStatus,\n  setError,\n  resetToken,\n} = tokenSlice.actions;\n\nexport const selectToken = (state: RootState) => state.token.storage;\nexport const selectTokenStatusLoading = (state: RootState) => state.token.statusLoading;\nexport const selectTokenError = (state: RootState) => state.token.error;\nexport const selectIsTokenExpired\n= (state: RootState) => isTokenActive(state.token.setAt, TOKEN_ACTIVE_DURATION);\n","import { client } from '../utils/axiosClient';\n\nexport type TokenResponse = {\n  success: boolean,\n  token: string,\n};\n\nexport const getToken = () => client.get<TokenResponse>('/token');\n","import { UserType } from '../type/User';\nimport { client } from '../utils/axiosClient';\n\nexport type GetUsersParams = {\n  link_to_next_page?: string | null;\n  page?: number;\n  count?: number;\n  delay?: number;\n};\n\nexport type GetUsersResponse = {\n  count: number | null;\n  links: {\n    next_url: string | null;\n    prev_url: string | null;\n  },\n  page: number | null;\n  success: boolean;\n  total_pages: number | null;\n  total_users: number | null;\n  users: UserType[];\n};\n\nexport const getAllUsers = () => client.get('/users');\nexport const getUserById = (userId: number) => client.get(`/users/${userId}`);\nexport const getUsersPage = (\n  link: string | null,\n  page: number,\n  count: number,\n) => client.get<GetUsersResponse>(link || `/users?page=${page}&count=${count}`);\n","/* eslint-disable consistent-return */\n/* eslint-disable no-param-reassign */\nimport {\n  createAsyncThunk,\n  createSlice,\n  PayloadAction,\n} from '@reduxjs/toolkit';\n// eslint-disable-next-line import/no-cycle\nimport {\n  RootState,\n} from '../../index';\nimport { UserType } from '../../../type/User';\nimport { getUsersPage, GetUsersParams, GetUsersResponse } from '../../../api/users.get';\n// import { getTokenAsync } from '../Token/tokenSlice';\nimport {\n  postUser,\n  // PostUserResponse,\n} from '../../../api/users.post';\n// import axios from 'axios';\n\nconst DELAY_OF_WAITING = 5000;\n\nexport interface UsersState {\n  storage: UserType[];\n  payload: UserType[];\n  statusLoading: 'idle' | 'loading' | 'failed';\n  error: string | null;\n\n  link_to_next_page: string | null;\n  current_page: number | null;\n  total_pages: number | null;\n  positions: string[];\n\n  fails: {\n    name: string[] | null;\n    email: string[] | null;\n    phone: string[] | null;\n    images: string[] | null;\n    position_id: string[] | null;\n  }\n}\n\nconst initialState: UsersState = {\n  storage: [],\n  payload: [],\n  statusLoading: 'idle',\n  error: null,\n\n  link_to_next_page: null,\n  current_page: null,\n  total_pages: null,\n  positions: [],\n\n  fails: {\n    name: null,\n    email: null,\n    phone: null,\n    images: null,\n    position_id: null,\n  },\n};\n\nexport const getUsersAsync = createAsyncThunk(\n  'users/fetchUsers',\n  async ({\n    link_to_next_page = null,\n    page = 1,\n    count = 6,\n    delay = DELAY_OF_WAITING,\n  }:GetUsersParams,\n  { rejectWithValue }) => {\n    try {\n      await new Promise(resolve => setTimeout(resolve, delay));\n      const response = await getUsersPage(link_to_next_page, page, count);\n\n      return response;\n    } catch (error) {\n      rejectWithValue(error);\n    }\n  },\n);\n\n// reqex validation\n\nexport const postUserAsync = createAsyncThunk(\n  'users/postUser',\n  async ({\n    user: {\n      name,\n      email,\n      phone,\n      images,\n      position_id,\n    },\n    // delay = 1000,\n  }: any,\n  {\n    // dispatch,\n    getState,\n    rejectWithValue,\n  }) => {\n    // eslint-disable-next-line no-console\n    console.log('postUserAsync', position_id);\n\n    try {\n      const state = getState() as RootState;\n\n      // eslint-disable-next-line no-console\n      console.log('state.token.storage', state.token.storage);\n      // await new Promise(resolve => setTimeout(resolve, delay));\n      // await dispatch(getTokenAsync());\n\n      const formData = new FormData();\n\n      formData.append('position_id', position_id);\n      formData.append('name', name);\n      formData.append('email', email);\n      formData.append('phone', phone);\n      formData.append('photo', images[0]);\n\n      // 1 - not work\n      // eslint-disable-next-line no-console\n      console.log(formData);\n\n      const response = await postUser(\n        {\n          body: formData,\n          headers: {\n            Token: String(state.token.storage),\n          },\n        },\n      );\n\n      // 2 - not work\n      // const response = await axios({\n      //   url: 'https://frontend-test-assignment-api.abz.agency/api/v1/users',\n      //   method: 'POST',\n      //   headers: {\n      //     'Token': String(state.token.storage),\n      //     'Accept': 'application/json',\n      //     'Content-Type': 'application/json',\n      //     // 'Authorization': 'Bearer ' + credentials.t\n      //   },\n      //   data: formData,\n      // })\n\n      // 3 - work but fetch\n      // const response = await fetch('https://frontend-test-assignment-api.abz.agency/api/v1/users',\n      //   {\n      //     method: 'POST',\n      //     body: formData,\n      //     headers: {\n      //       'Token': String(state.token.storage),\n      //     },\n      //   }\n      // ).then((res) => res.json());\n\n      // eslint-disable-next-line no-console\n      console.log('postUserAsync/ response', response);\n\n      return response;\n    } catch (error) {\n      rejectWithValue(error);\n    }\n  },\n);\n\nconst usersSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    addUsers: (state: UsersState, action: PayloadAction<UserType[]>) => {\n      state.storage.push(...action.payload);\n    },\n    addPayload: (state: UsersState) => {\n      state.storage.push(...state.payload);\n      state.payload.length = 0;\n    },\n    setStatus: (\n      state: UsersState,\n      action: PayloadAction<'idle' | 'loading' | 'failed'>,\n    ) => {\n      state.statusLoading = action.payload;\n    },\n    resetState: () => {\n      return initialState;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(getUsersAsync.pending, (\n        state: UsersState,\n      ) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(getUsersAsync.fulfilled,\n        (\n          state: UsersState,\n          action:PayloadAction<GetUsersResponse | undefined,\n          string, {arg: GetUsersParams; requestId: string; requestStatus: 'fulfilled';}, never>,\n        ) => {\n          if (action.payload && action.payload.success) {\n            const {\n              users,\n              links: { next_url },\n              total_pages,\n              page,\n            } = action.payload;\n\n            state.payload.push(...users);\n            state.statusLoading = 'idle';\n            state.link_to_next_page = next_url;\n            state.total_pages = total_pages;\n            state.current_page = page;\n          } else {\n            state.error = 'getUsersAsync.fulfilled/ response.success = false';\n          }\n        })\n      .addCase(getUsersAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n      })\n      .addCase(postUserAsync.pending, (\n        state: UsersState,\n      ) => {\n        state.statusLoading = 'loading';\n      })\n      .addCase(postUserAsync.fulfilled, (\n        state,\n        action,\n        //     :PayloadAction<PostUserResponse, string, {\n        //     arg: any;\n        //     requestId: string;\n        //     requestStatus: \"fulfilled\";\n        // }, never>\n      ) => {\n        state.statusLoading = 'idle';\n\n        // eslint-disable-next-line no-console\n        console.log('postUserAsync.fulfilled/ action.payload', action.payload);\n        // state.storage.push(action.payload);\n        if (!action.payload) {\n          // eslint-disable-next-line no-useless-return\n          return;\n        }\n\n        // if (action.payload.success) {\n        //   console.log(action.payload.message);\n        // } else {\n        //   state.fails = { ...state.fails, ...action.payload.fails};\n        // }\n      })\n      .addCase(postUserAsync.rejected, (state) => {\n        state.statusLoading = 'failed';\n        // console.log('postUserAsync.rejected');\n      });\n  },\n});\n\nexport default usersSlice.reducer;\nexport const {\n  addUsers,\n  addPayload,\n  setStatus,\n  resetState,\n} = usersSlice.actions;\n\nexport const selectUsers = (state: RootState) => state.users.storage;\nexport const selectPayloadUsers = (state: RootState) => state.users.payload;\nexport const selectUsersStatusLoading = (state: RootState) => state.users.statusLoading;\nexport const selectUsersError = (state: RootState) => state.users.error;\nexport const selectLinkToNext = (state: RootState) => state.users.link_to_next_page;\nexport const selectIsLastPage\n= (state: RootState) => state.users.current_page === state.users.total_pages;\nexport const selectPostFails = (state: RootState) => state.users.fails;\n","import { client } from '../utils/axiosClient';\n\nexport type PostUserResponse = {\n  success: boolean;\n  user_id: number;\n  message: string;\n  fails?: {\n    name: string[],\n    email: string[],\n    phone: string[],\n    position_id: string[],\n    photo: string[],\n  },\n};\n\nexport const postUser = (data: any) => client.post('/users', data);\n","/* eslint-disable import/no-cycle */\nimport {\n  configureStore,\n  ThunkAction,\n  Action,\n  combineReducers,\n} from '@reduxjs/toolkit';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport positionsSlice from './features/Positions/positionsSlice';\nimport tokenReducer from './features/Token/tokenSlice';\nimport usersSlice from './features/Users/usersSlice';\n\nconst rootReducer = combineReducers({\n  users: usersSlice,\n  token: tokenReducer,\n  positions: positionsSlice,\n});\n\nconst persistConfig = {\n  key: 'root',\n  storage,\n  whitelist: ['token'],\n  // blacklist: ['posts'],\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER, 'posts'],\n    },\n  }),\n});\n\nexport default store;\n\nexport const persistor = persistStore(store);\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\n\n/* eslint-disable @typescript-eslint/indent */\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport type { RootState, AppDispatch } from '.';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React, { FunctionComponent } from 'react';\nimport './Container.scss';\n\ninterface ContainerProps {\n  children: any;\n}\n\nexport const Container: FunctionComponent<ContainerProps> = ({ children }) => {\n  return (\n    <div className=\"Container\">\n      {children}\n    </div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport './Wrapper.scss';\n\ninterface WrapperProps {\n  children: any;\n}\n\nexport const Wrapper: FunctionComponent<WrapperProps> = ({ children }) => {\n  return (\n    <div className=\"Wrapper\">{children}</div>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport classNames from 'classnames';\nimport './Button.scss';\n\ntype AnyFunction = (...args: unknown[]) => unknown;\n\ninterface ButtonProps {\n  className?: string; // External className for position\n  disabled?: boolean;\n  children?: any;\n  onClick?: AnyFunction;\n  width?: number;\n}\n\nexport const Button: FunctionComponent<ButtonProps> = ({\n  className,\n  disabled = false,\n  children = '',\n  // eslint-disable-next-line no-console\n  onClick = () => console.log('no onClick function'),\n  width,\n}) => {\n  return (\n    // eslint-disable-next-line jsx-a11y/no-static-element-interactions\n    <div\n      className={classNames('Button',\n        { 'Button--disabled': disabled },\n        className)}\n      onClick={onClick}\n      style={{ width }}\n      onKeyDown={() => {}}\n    >\n      <div className=\"Button__container\">\n        {children}\n      </div>\n    </div>\n  );\n};\n","export default __webpack_public_path__ + \"static/media/logo.85fd1d96.svg\";","import React, { FunctionComponent } from 'react';\n\nimport { Container } from '../Container';\nimport { Wrapper } from '../Wrapper/Wrapper';\nimport { Button } from '../../UI/Button/Button';\nimport Logo from '../../images/logo.svg';\n\nimport './Header.scss';\n\nexport const Header: FunctionComponent = () => {\n  return (\n    <header className=\"Header\">\n      <Container>\n        <Wrapper>\n          <div className=\"Header__container\">\n            <div className=\"Header__logo\">\n              <img src={Logo} alt=\"Logo\" />\n            </div>\n\n            <div className=\"Header__nav\">\n              <Button\n                className=\"Header__button\"\n                disabled={false}\n              >\n                Users\n              </Button>\n\n              <Button className=\"Header__button\">Sign in</Button>\n            </div>\n          </div>\n        </Wrapper>\n      </Container>\n    </header>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { FunctionComponent } from 'react';\nimport { Container } from '../Container';\nimport { Button } from '../../UI/Button/Button';\nimport { Wrapper } from '../Wrapper/Wrapper';\nimport './ArticlePromo.scss';\n\nexport const ArticlePromo: FunctionComponent = () => {\n  return (\n    <article className=\"Promo\">\n      <Container>\n        <div className=\"Promo__poster\">\n          <Wrapper>\n            <h1>Test assignment for front-end developer</h1>\n\n            <p>\n              What defines a good front-end developer is one that has skilled knowledge of HTML, CSS, JS with a vast understanding of User design thinking as they&apos;ll be building web interfaces with accessibility in mind. They should also be excited to learn, as the world of Front-End Development keeps evolving.\n            </p>\n\n            <Button className=\"Promo__button\">Sign up</Button>\n          </Wrapper>\n        </div>\n      </Container>\n    </article>\n  );\n};\n","import React, {\n  FunctionComponent,\n  useEffect,\n  useRef,\n  // useState,\n} from 'react';\n\nimport { useAppDispatch, useAppSelector } from '../../store/hooks';\n// import { widthContentColumns } from '../../helpers/widthContentColumns';\nimport {\n  addPayload,\n  getUsersAsync,\n  selectIsLastPage,\n  selectLinkToNext,\n  selectPayloadUsers,\n  selectUsers,\n  selectUsersError,\n  selectUsersStatusLoading,\n} from '../../store/features/Users/usersSlice';\n// import { Card } from '../Card';\nimport { Container } from '../Container';\nimport { Wrapper } from '../Wrapper/Wrapper';\n// import { List } from '../List';\nimport { Button } from '../../UI/Button/Button';\n// import { UserType } from '../../type/User';\n\nimport './ArticleGet.scss';\n\nexport const ArticleGet: FunctionComponent = () => {\n  const divRef = useRef<any>(null);\n  const dispatch = useAppDispatch();\n  const users = useAppSelector(selectUsers);\n  const payloadUsers = useAppSelector(selectPayloadUsers);\n  const isLoading = useAppSelector(selectUsersStatusLoading);\n  const link_to_next_page = useAppSelector(selectLinkToNext);\n  const isLastPage = useAppSelector(selectIsLastPage);\n  const error = useAppSelector(selectUsersError);\n\n  // const [maxWidthContent, setMaxWidthContent] = useState('200px');\n\n  useEffect(() => {\n    // setMaxWidthContent(`${widthContentColumns()}px`);\n  }, []);\n\n  useEffect(() => {\n    setTimeout(() => {\n      if (payloadUsers.length > 0) {\n        dispatch(addPayload());\n      }\n    }, 5000);\n\n    if (divRef.current !== null) {\n      divRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [users.length, payloadUsers, dispatch]);\n\n  return (\n    <article className=\"ArticleGet\">\n      <Container>\n        <Wrapper>\n          <div className=\"ArticleGet__content\">\n            <h2 className=\"ArticleGet__title\">Working with GET request</h2>\n\n            {error && <p>{error}</p>}\n\n            {/* <List>\n              {users.map((user: UserType) => (\n                <Card\n                  key={user.id}\n                  user={user}\n                  maxWidthContent={maxWidthContent}\n                />\n              ))}\n            </List> */}\n\n            {/* distance between List1 - List2 */}\n\n            {(isLoading === 'loading') && <>Loading .....</>}\n\n            {/* <List>\n              {payloadUsers.map((user: UserType) => (\n                <Card\n                  key={user.id}\n                  user={user}\n                  maxWidthContent={maxWidthContent}\n                />\n              ))}\n            </List> */}\n\n            <div className=\"ArticleGet__button-container\">\n              {!isLastPage && (\n                <Button\n                  onClick={() => dispatch(getUsersAsync({ link_to_next_page }))}\n                  width={120}\n                >\n                  Show More\n                </Button>\n              )}\n            </div>\n\n            {/* <div ref={divRef}></div> */}\n          </div>\n        </Wrapper>\n      </Container>\n    </article>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nimport { ArticlePromo } from '../../components/ArticlePromo/ArticlePromo';\nimport { ArticleGet } from '../../components/ArticleGet';\n// import { ArticlePost } from '../../components/ArticlePost';\n\nimport './HomePage.scss';\n\nexport const HomePage: FunctionComponent = () => {\n  return (\n    <section className=\"HomePage\">\n      <ArticlePromo />\n      <ArticleGet />\n      {/* <ArticlePost /> */}\n    </section>\n  );\n};\n","import React, { FunctionComponent } from 'react';\n\nexport const NotFound: FunctionComponent = () => {\n  return (\n    <div>\n      This page doesn&apos;t exist.\n    </div>\n  );\n};\n","import React, { useEffect } from 'react';\nimport {\n  createHashRouter,\n  Outlet,\n} from 'react-router-dom';\n\nimport { useAppDispatch } from './store/hooks';\nimport { getTokenAsync } from './store/features/Token/tokenSlice';\nimport { getUsersAsync } from './store/features/Users/usersSlice';\nimport { getPositionsAsync } from './store/features/Positions/positionsSlice';\nimport { Header } from './components/Header';\nimport { HomePage } from './pages/HomePage/HomePage';\nimport { NotFound } from './pages/NotFound';\n\n// localStorage.clear();\n\nfunction App() {\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    dispatch(getTokenAsync());\n    dispatch(getUsersAsync({ page: 1, count: 6 }));\n    dispatch(getPositionsAsync());\n  }, [dispatch]);\n\n  return (\n    <>\n      <Header />\n\n      <div style={{\n        position: 'fixed',\n        top: '70px',\n        left: '20px',\n        zIndex: 9999,\n      }}\n      >\n        {window.innerWidth}\n        x\n        {window.innerHeight}\n      </div>\n\n      <main>\n        <Outlet />\n      </main>\n    </>\n  );\n}\n\nexport const router = createHashRouter([\n  {\n    path: '/',\n    element: <App />,\n    errorElement: <NotFound />,\n    id: 'App',\n    children: [\n      {\n        path: '/',\n        element: <HomePage />,\n        id: 'homepage',\n        errorElement: <>Error on Homepage</>,\n      },\n      {\n        path: '/admin',\n        element: <>AdminPage</>,\n        id: 'admin-page',\n        errorElement: <>Error on AdminPage</>,\n      },\n    ],\n  },\n]);\n","import React, { Provider } from 'react-redux';\nimport ReactDOM from 'react-dom/client';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { RouterProvider } from 'react-router-dom';\n\nimport store, { persistor } from './store';\nimport { router } from './App';\n\nimport './style/index.css';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement,\n);\n\nroot.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <RouterProvider router={router} />\n    </PersistGate>\n  </Provider>,\n);\n"],"sourceRoot":""}